//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17626
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace Bantu.Notification {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Notification.INotificationService")]
    public interface INotificationService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotificationService/RegisterEndpoint", ReplyAction="http://tempuri.org/INotificationService/RegisterEndpointResponse")]
        System.IAsyncResult BeginRegisterEndpoint(string username, string endpoint, System.AsyncCallback callback, object asyncState);
        
        void EndRegisterEndpoint(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotificationService/UnregisterEndpoint", ReplyAction="http://tempuri.org/INotificationService/UnregisterEndpointResponse")]
        System.IAsyncResult BeginUnregisterEndpoint(string username, System.AsyncCallback callback, object asyncState);
        
        void EndUnregisterEndpoint(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotificationService/Notify", ReplyAction="http://tempuri.org/INotificationService/NotifyResponse")]
        System.IAsyncResult BeginNotify(string from, string to, string gameId, System.AsyncCallback callback, object asyncState);
        
        void EndNotify(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotificationServiceChannel : Bantu.Notification.INotificationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NotificationServiceClient : System.ServiceModel.ClientBase<Bantu.Notification.INotificationService>, Bantu.Notification.INotificationService {
        
        private BeginOperationDelegate onBeginRegisterEndpointDelegate;
        
        private EndOperationDelegate onEndRegisterEndpointDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterEndpointCompletedDelegate;
        
        private BeginOperationDelegate onBeginUnregisterEndpointDelegate;
        
        private EndOperationDelegate onEndUnregisterEndpointDelegate;
        
        private System.Threading.SendOrPostCallback onUnregisterEndpointCompletedDelegate;
        
        private BeginOperationDelegate onBeginNotifyDelegate;
        
        private EndOperationDelegate onEndNotifyDelegate;
        
        private System.Threading.SendOrPostCallback onNotifyCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public NotificationServiceClient() {
        }
        
        public NotificationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NotificationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RegisterEndpointCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UnregisterEndpointCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> NotifyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Bantu.Notification.INotificationService.BeginRegisterEndpoint(string username, string endpoint, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegisterEndpoint(username, endpoint, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Bantu.Notification.INotificationService.EndRegisterEndpoint(System.IAsyncResult result) {
            base.Channel.EndRegisterEndpoint(result);
        }
        
        private System.IAsyncResult OnBeginRegisterEndpoint(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string endpoint = ((string)(inValues[1]));
            return ((Bantu.Notification.INotificationService)(this)).BeginRegisterEndpoint(username, endpoint, callback, asyncState);
        }
        
        private object[] OnEndRegisterEndpoint(System.IAsyncResult result) {
            ((Bantu.Notification.INotificationService)(this)).EndRegisterEndpoint(result);
            return null;
        }
        
        private void OnRegisterEndpointCompleted(object state) {
            if ((this.RegisterEndpointCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterEndpointCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterEndpointAsync(string username, string endpoint) {
            this.RegisterEndpointAsync(username, endpoint, null);
        }
        
        public void RegisterEndpointAsync(string username, string endpoint, object userState) {
            if ((this.onBeginRegisterEndpointDelegate == null)) {
                this.onBeginRegisterEndpointDelegate = new BeginOperationDelegate(this.OnBeginRegisterEndpoint);
            }
            if ((this.onEndRegisterEndpointDelegate == null)) {
                this.onEndRegisterEndpointDelegate = new EndOperationDelegate(this.OnEndRegisterEndpoint);
            }
            if ((this.onRegisterEndpointCompletedDelegate == null)) {
                this.onRegisterEndpointCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterEndpointCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterEndpointDelegate, new object[] {
                        username,
                        endpoint}, this.onEndRegisterEndpointDelegate, this.onRegisterEndpointCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Bantu.Notification.INotificationService.BeginUnregisterEndpoint(string username, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUnregisterEndpoint(username, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Bantu.Notification.INotificationService.EndUnregisterEndpoint(System.IAsyncResult result) {
            base.Channel.EndUnregisterEndpoint(result);
        }
        
        private System.IAsyncResult OnBeginUnregisterEndpoint(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            return ((Bantu.Notification.INotificationService)(this)).BeginUnregisterEndpoint(username, callback, asyncState);
        }
        
        private object[] OnEndUnregisterEndpoint(System.IAsyncResult result) {
            ((Bantu.Notification.INotificationService)(this)).EndUnregisterEndpoint(result);
            return null;
        }
        
        private void OnUnregisterEndpointCompleted(object state) {
            if ((this.UnregisterEndpointCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UnregisterEndpointCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UnregisterEndpointAsync(string username) {
            this.UnregisterEndpointAsync(username, null);
        }
        
        public void UnregisterEndpointAsync(string username, object userState) {
            if ((this.onBeginUnregisterEndpointDelegate == null)) {
                this.onBeginUnregisterEndpointDelegate = new BeginOperationDelegate(this.OnBeginUnregisterEndpoint);
            }
            if ((this.onEndUnregisterEndpointDelegate == null)) {
                this.onEndUnregisterEndpointDelegate = new EndOperationDelegate(this.OnEndUnregisterEndpoint);
            }
            if ((this.onUnregisterEndpointCompletedDelegate == null)) {
                this.onUnregisterEndpointCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUnregisterEndpointCompleted);
            }
            base.InvokeAsync(this.onBeginUnregisterEndpointDelegate, new object[] {
                        username}, this.onEndUnregisterEndpointDelegate, this.onUnregisterEndpointCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Bantu.Notification.INotificationService.BeginNotify(string from, string to, string gameId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginNotify(from, to, gameId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Bantu.Notification.INotificationService.EndNotify(System.IAsyncResult result) {
            base.Channel.EndNotify(result);
        }
        
        private System.IAsyncResult OnBeginNotify(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string from = ((string)(inValues[0]));
            string to = ((string)(inValues[1]));
            string gameId = ((string)(inValues[2]));
            return ((Bantu.Notification.INotificationService)(this)).BeginNotify(from, to, gameId, callback, asyncState);
        }
        
        private object[] OnEndNotify(System.IAsyncResult result) {
            ((Bantu.Notification.INotificationService)(this)).EndNotify(result);
            return null;
        }
        
        private void OnNotifyCompleted(object state) {
            if ((this.NotifyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.NotifyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void NotifyAsync(string from, string to, string gameId) {
            this.NotifyAsync(from, to, gameId, null);
        }
        
        public void NotifyAsync(string from, string to, string gameId, object userState) {
            if ((this.onBeginNotifyDelegate == null)) {
                this.onBeginNotifyDelegate = new BeginOperationDelegate(this.OnBeginNotify);
            }
            if ((this.onEndNotifyDelegate == null)) {
                this.onEndNotifyDelegate = new EndOperationDelegate(this.OnEndNotify);
            }
            if ((this.onNotifyCompletedDelegate == null)) {
                this.onNotifyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnNotifyCompleted);
            }
            base.InvokeAsync(this.onBeginNotifyDelegate, new object[] {
                        from,
                        to,
                        gameId}, this.onEndNotifyDelegate, this.onNotifyCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Bantu.Notification.INotificationService CreateChannel() {
            return new NotificationServiceClientChannel(this);
        }
        
        private class NotificationServiceClientChannel : ChannelBase<Bantu.Notification.INotificationService>, Bantu.Notification.INotificationService {
            
            public NotificationServiceClientChannel(System.ServiceModel.ClientBase<Bantu.Notification.INotificationService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginRegisterEndpoint(string username, string endpoint, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = username;
                _args[1] = endpoint;
                System.IAsyncResult _result = base.BeginInvoke("RegisterEndpoint", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRegisterEndpoint(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RegisterEndpoint", _args, result);
            }
            
            public System.IAsyncResult BeginUnregisterEndpoint(string username, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = username;
                System.IAsyncResult _result = base.BeginInvoke("UnregisterEndpoint", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUnregisterEndpoint(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UnregisterEndpoint", _args, result);
            }
            
            public System.IAsyncResult BeginNotify(string from, string to, string gameId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = from;
                _args[1] = to;
                _args[2] = gameId;
                System.IAsyncResult _result = base.BeginInvoke("Notify", _args, callback, asyncState);
                return _result;
            }
            
            public void EndNotify(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Notify", _args, result);
            }
        }
    }
}
